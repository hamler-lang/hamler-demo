-----------------------------------------------------------------------------
-- |
-- Module      :  Demo.Server
-- Copyright   :  (c) 2020 EMQ Technologies Co., Ltd.
-- License     :  BSD-style (see the LICENSE file)
--
-- Maintainer  :  Feng Lee, feng@emqx.io
--                Yang M, yangm@emqx.io
-- Stability   :  experimental
-- Portability :  portable
--
-- The GenServer Demo.
--
-----------------------------------------------------------------------------
module Demo.Server (startServer, inc, dec, query, main) where

import Prelude
import Control.Behaviour.GenServer
  ( class GenServer
  , HandleCall
  , HandleCast
  , Init
  , ServerAction(..)
  , initOk
  , callTo
  , castTo
  , noReply
  , reply
  , startLinkWith
  )
import System.IO (println)

data Request = Inc | Dec | Query

data Reply = QueryResult Integer

data State = State Integer

startServer :: Process Pid
startServer = startLinkWith "Demo.Server" (init 20)

-----------------------------------------------------------------------------
-- | Server API
-----------------------------------------------------------------------------

inc :: Pid -> Process ()
inc pid = castTo pid Inc

dec :: Pid -> Process ()
dec pid = castTo pid Dec

query :: Pid -> Process Integer
query pid = do
  QueryResult i <- callTo pid Query
  return i

-----------------------------------------------------------------------------
-- | Server callbacks
-----------------------------------------------------------------------------

instance GenServer Request Reply State where
  handleCall = handleCall
  handleCast = handleCast

init :: Integer -> Init State
init n = return $ initOk (State n)

handleCall :: HandleCall Request Reply State
handleCall Query (State i) = do
  println "Call: Query"
  reply (QueryResult i) (State i)
handleCall _ st = return $ ServerIgnore st -- TODO:

handleCast :: HandleCast Request State
handleCast Inc (State n) = do
  println "Cast: Inc"
  noReply $ State (n+1)
handleCast Dec (State n) = do
  println "Cast: Dec"
  noReply $ State (n-1)
handleCast _ st = noReply st

-----------------------------------------------------------------------------
-- | main
-----------------------------------------------------------------------------

main :: IO ()
main = do
  pid <- startServer
  inc pid
  inc pid
  inc pid
  dec pid
  reply <- query pid
  printf "%d" reply

