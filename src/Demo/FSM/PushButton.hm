module Demo.FSM.PushButton where

import Prelude
import Control.Behaviour.GenStatem
  ( class GenStatem
  , EventType(..)
  , Init
  , HandleEvent
  , initOk
  , replyTo
  , next, keep
  , unhandled
  )
import Control.Behaviour.GenStatem as FSM

data Event = Push | GetCount
data State = On | Off
data Data = Data Integer

instance GenStatem Event State Data where
  handleEvent = handleEvent

name :: Atom
name = :pushbutton_statem

start :: Process Pid
start = FSM.startWith name init

push :: Process State
push = FSM.call name Push

getCount :: Process Integer
getCount = FSM.call name GetCount

stop :: Process ()
stop = FSM.stop name

init :: Init State Data
init = return $ initOk Off (Data 0)

handleEvent :: HandleEvent Event State Data
{- TODO: fixme later
handleEvent (Call from) Push Off (Data i) = do
  replyTo from On
  return $ next On (Data i+1)

handleEvent (Call from) Push On d = do
  replyTo from Off
  return $ next Off d

handleEvent (Call from) GetCount s d@(Data i) = do
  replyTo from i
  return $ keep s d
-}

handleEvent = unhandled

